This example shows how to couple input dimension reduction
with statistical inference to recover a 2D source field.
The model is a 2D elasticity equation with its elastic
properties (the Lame constants mu and lambda) being a
random field characterized by multipoint statistics.
The computational mesh is 45x45, and since there are
2 uncertain quantities (mu and lambda) per grid point,
there are a total of 2x45x45=4050 uncertain parameters.

Fortunately, these uncertain parameters are correlated
so it may be possible to reduce the effective dimension 
by PCA-like methods. The input correlation is expressed
as an ensemble of snapshots (1000 in this case). The 
idea is to use kernel PCA to reduce the high dimension 
(4050) down to a handful (~10) while the information 
embedded in the snapshots are still mostly preserved by 
removing the dimensions that contributes little to the 
overall variance (small eigenvalues in the KPCA space).
The values of the reduced inputs (the feature inputs)
are then inferred from the experimental data via MCMC. 
The best solution (mu, lambda) are then recovered from 
the best feature inputs.

To perform dimension reduction, the first step is to 
use the ensemble snapshots to create a KPCA model:

1. Create a KPCA model from snapshots ====> kpcaModel
   Run: psuade.dev < createModel.psscript

   * Make sure to gzip -d logSnapshots.gz first
   * This KPCA model will be used to convert between
     the physical and feature space during inference
     (inference is in the feature space but it needs
     to be converted to the physical space to run
     simulations).

2. Prepare experimental data (if you have access to 
        the geocentric elasticity code)

   Run: python genExperiment.py < genexp.pyscript ==> 
         MeasurementData - used in MCMC
         SrcSnapshot    - true solution in physical space
         SrcSnapshotXi  - true solution in feature space
   NOTE: This script requires a code called Geocentric.

3. Inference (if you have access to the geocentric 
              elasticity code)

   * an important script for inference is likelihood.py, which
     run simulation (geocentric) and produces a likelihood that
     is to be fed back to psuade in MCMC. You can test this
     script by running:
             python likelihood.py SrcSnapshotXi out
     And, make sure likelihood = 1

   * run the following for inference

     psuade.dev < mcmc.script
   
4. If everything goes well, PosteriorX and PosteriorY contains
   the posterior input and solution fields. Use view_mcmc_s*.py
   to see posteriors. 

   * If you do not have access to geocentric, you can still
     view the posterior snapshots by using the pre-prepared
     posterior samples : PosteriorX.gz and PosteriorY.gz, and
     also the source snapshot SrcSnapshot, and then do: 

     python view_mcmcpost_snapshots.py  or
     python view_mcmcpost_solution.py  or

     To view the intermediate snapshots and the corresponding
     geocentric solution during MCMC iterations.

5. Use: make -f MakeClean to clean directory

