**********************************************************************
A challenge in global sensitivity analysis is to account for 
correlations in the uncertain parameters. Correlations may be present
in several forms:
1. correlation coefficients in Gaussian distributions (nonzero
   off-diagonal terms in the covariance matrix)
2. correlation embedded in parameter distribution in the form of a
   large sample (e.g. posterior sample from MCMC)
3. correlation in the form of inequality constraints
   (e.g. 0 <= X1 + X2 <= 1)

In this example, we illustrate how to perform global sensitivity
analysis for these 3 forms of parameter correlations.
**********************************************************************
 
**********************************************************************
Case 1: parameters with Gaussian distributions and correlation
======================================================================
In this case setting up parameter correlation can be done in the INPUT
section: e.g. for parameter 1, 2, 3 with standard normal distributions
and correlation between parameter 1 and 2, the following can be used:

   PDF 1 N 0 1
   PDF 2 N 0 1
   PDF 3 N 0 1
   COR 1 2 0.7

----------------------------------------------------------------------
Results to be expected:

A. No correlation:

   mean = 0, variance = 4 + 9 + 1 = 14

B. With correlation:

   Formula:
   variance = 4 Var(X1) + 9 Var(X2) + Var(X3) + 12 Cov(X1,X2)
   V1 = Var(E[(2X1+3X2+X3)|X1])
      = 4 Var(X1) + 9 Var[E(X2|X1)] + 12 Cov(X1,X2)
      = 4 Var(X1) + 9 rho^2 Var(X2) + 12 Cov(X1,X2)
   V2 = Var(E[(2X1+3X2+X3)|X2])
      = 4 Var[E(X2|X1)] + 9 Var(X2] + 12 Cov(X1,X2)
      = 4 rho^2 Var(X1) + 9 Var(X2) + 12 Cov(X1,X2)
   V3 = Var(E[(2X1+3X2+X3)|X3]) = Var(X3)

   * Corr (rho) = 0.7
     variance = 14 + 8.4 = 22.4
     VCE(X1) = 16.81 (unnormalized)
     VCE(X2) = 19.36 (unnormalized)
     VCE(X3) = 1     (unnormalized)
   * Corr (rho) = -0.7
     variance = 14 - 8.4 = 5.6
     VCE(X1) = 0.01 (unnormalized)
     VCE(X2) = 2.56 (unnormalized)
     VCE(X3) = 1    (unnormalized)

NOTE: Since samples are drawn from these distribution within 
      the confines of the parameter ranges, and in order to 
      truly draw samples from N(0,1), you may want to set 
      the parameter ranges to be [-5, 5] (see psuadeME.in 
      file) to ensure >99.999% coverage.

There are two ways to compute sensitivity indices in this case:
a. Create a large sample using RS and use the main effect 
   (ME) method
b. call 'rsvce1_xxx' directly

Case 1 is shown below (with correlation = 0.7)
----------------------------------------------------------------------
Perform the following steps to run Case 1:
(note that psuadeME.in has COR set to 0.7)

i.   compile the simulator
     cc -o simulator simulator.c -lm
ii.  create a sample to build response surface by doing
     > psuade psuadeRS.in
     > mv psuadeData RSSample
iii. use main effect analysis by running
     psuade psuadeME.in

These 3 steps have been captured in psScriptCase1.in so you can
also run: psuade < psScriptCase1.in

**********************************************************************
Case 2: parameters with possibly non-normal/correlated distributions 
        that are represented by a large sample (e.g. posterior 
        sample from MCMC)
It is the same as Case 1 (correlation=0.7) but using sample instead
======================================================================
In this case, the analysis involves the following steps (the first of
which is to evaluate the outputs of the large sample with a response
surface):

i.   Create a small sample (in RSSample) for building response surface:
     > cc -o simulator simulator.c -lm
     > psuade psuadeRS.in
     > mv psuadeData RSSample
ii.  If users already have a large correlated input sample, simply
     convert them into psuade format in put it in, say, the file
     called 'largeSample'. 
     In case users do not have the large sample handy, this step
     creates a large sample with some known distributions. Do:
     > psuade psuadeGenLargeSample.in
     > mv psuadeData largeSample
iii. evaluate the large sample using the response surface:
     > edit largeSample by setting: driver = ./RSSample
     > psuade largeSample
     > mv psuadeData largeSample
iv.  launch psuade in command line mode and do:
     > psuade 
     psuade> load largeSample
     psuade> me
     ...

NOTE: These steps are captured in psScriptCase2.in.

**********************************************************************
Case 3: parameters with possibly non-normal/correlated distributions 
        that are represented by a large sample (e.g. posterior 
        sample from MCMC) AS WELL AS inequality constraint
        E.g. -5 <= X1 + X2 <= 5
There are several ways of doing this. One method using 'rsvce1_ni'.
======================================================================
The idea is to append the problem with inequality constraints. The 
mechanism to implement inequality constraint is to add a line in the 
ANALYSIS section of a psuade input file (e.g. psuadeSobol1Constr.in):
(or psuade < psScriptCase3.in)

   analyzer rs_constraint = constrData indexFile Lbnd Ubnd

where
   constrData - a sample in psuade format to represent the constraint
                (in this case it is -5 <= X1 + X2 <= 5)
   indexFile  - index file to indicate which variables are involved 
                in the constraint (in this case both X1 and X2)
     Hence, i n indexFile we have
     3  <has to be the same as the total number of inputs)
     1 0.0  <input 1 is used, thus the 2nd field is not needed, set to 0)
     2 0.0  <input 2 is used, thus the 2nd field is not needed, set to 0)
     0 0.0  <input 3 is not used, then the first field is set to 0 and 
             the second set to any or default value>
   Lbnd - lower bound for filtering : -5 in this case
   Ubnd - upper bound for filtering : +5 in this case

to create constrData, do:
> cc -o constraint constraint.c -lm
> psuade psuadeRSConstr.in
> mv psuadeData constrData

NOW everything is ready, the next step is to run:
> psuade psuadeSobol1Constr.in (choose response surface method 1)

Normalized mean VCE for input   1 =  2.5e-02 
Normalized mean VCE for input   2 =  4.0e-01
Normalized mean VCE for input   3 =  1.5e-01

NOTE: The steps above have been captured in psScriptCase3.in so you
      can just run : psuade < psScriptCase3.in
**********************************************************************
Case 4: You can combine correlated distribution with inequality
        constraints too. No example is given here, but you got the 
        idea.
**********************************************************************
You can clean up the files by running: make -f MakeClean


