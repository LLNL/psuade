==================================================================
This example shows a study of O'hagan example
==================================================================
Problem definition:

Let X    be a design parameter.
    beta be an uncertain parameter.
0.2 <= X <= 4
0.35 <= beta <= 0.75

------------------------------------------------------------------
The true model is

Ye = Beta * X / (1 + X / 20)

where true beta = Beta = 0.65 and so

Ye = 0.65 * X / (1 + X / 20)
------------------------------------------------------------------
The simulation model is: 

Ys = beta * X

------------------------------------------------------------------
Discrepancy function:

d1 = Ye - Ys 
   = 0.65 * X / (1 + X / 20) - dbeta * X
   = 0.65 * X / (1 + 0.05 * X) - dbeta * X * (1 + 0.05 X) / ( 1 + 0.05 X)
   = [(0.65 - dbeta) * X - 0.05 * dbeta * X * X] / ( 1 + 0.05 X)  

where beta=dbeta is fixed during the construction of discrepancy 
although the true beta is not supposed to be known.
        
------------------------------------------------------------------
corrected function:

Y = Ys + d1 = beta * X + 0.65 * X / (1 + X / 20) - dbeta * X
            = (beta - dbeta) * X + 0.65 * X / (1 + X / 20)

For example, if dbeta has been set to be 0.55 (default setting,
which is the middle of the range of beta), then the corrected
function Y becomes

Y = (beta - 0.55) * X + 0.65 * X / (1 + X / 20)

Then during inference, the posterior distribution of beta will be
around beta=0.55 (a property of discrepancy modeling - that the
mode of the posterior distribution is the user-specified value
of beta; thus, discrepancy modeling is good for improving prediction
but not improving the knowledge of model parameters)

==================================================================
                 Preliminary Steps
------------------------------------------------------------------
I. Preparing experimental data file (expdata)

   You can use the existing expdata file in this directory. If 
   you want to try generating experimental data yourself, follow
   the following steps:

   1. Compile the program that generates experimental data
      (experimental data follows the Ye formulation above with 
       added noise)

      cc -o experiment experiment.c -lm

   2. Run the program 'experiment' to generate data in psuadeData

      psuade psExper.in

   3. Convert the experimental data file from PSUADE to standard
      format  

      psuade
      > load psuadeData
      > write_std exp.std
      > quit

    4. Compile and run the program 'processExp', which massages
       the experimental file 'exp.std' into 'expdata'

II. Prepare simulation data

    1. Compile the program that generates the simulator 

       cc -o simulator simulator.c -lm

    2. Run sampling on the simulator and move the result to 'simdata'

       psuade psSim.in
       mv psuadeData simdata

III. Run inference

     There are 2 cases the details of which are given in each of 
     the subdirectories (Case 1: no discrepancy, Case 2: with
     discrepancy).

     To run these cases, first copy script.mcmc from Case 1 or 2,
     then do: psuade < script.mcmc

