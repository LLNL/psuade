**********************************************************************
*      Welcome to PSUADE (version 2.1.0)
**********************************************************************
PSUADE - A Problem Solving environment for 
         Uncertainty Analysis and Design Exploration (2.1.0)
(for help, enter <help>)
======================================================================
psuade> # compile the simulation model
psuade> psuade> # generate sample outputs
psuade> Sampling INFO: Creating a sample assuming all uncertain parameters are
               uniformly distributed.
PSUADE run: creating interface to user driver.
PSUADE run: output level = 1
PSUADE run: max parallel jobs = 1
PSUADE run: max job wait time = 1000000 seconds
PSUADE run: min job wait time = 1 seconds
PSUADE run: launch interval   = 1 seconds
PSUADE run: save frequency    = every 1000000 runs
NOTE: If evaluation should be fast but is slow, check save_frequency
      because it may be due to too much I/O.
NOTE: To dynamically change max jobs, create psuade_pmachine file
NOTE: To terminate gracefully, create psuade_stop file
======================================================================
PSUADE run: nSamples = 300 
.........
Sample point    100 completed (out of 300).
.........
Sample point    200 completed (out of 300).
.........
Sample point    300 completed (out of 300).

PSUADE run: jobs completed = 300(out of 300)
======================================================================
psuade> # rename the psuade output file
psuade> psuade> # random seed 
psuade> New random seed = 12917411
psuade> # load sample
psuade> load complete : nSamples = 300
                nInputs  = 3
                nOutputs = 1
psuade> # load sample one more time so the sample size is 600
psuade> loadmore complete : nSamples = 600
                    nInputs  = 3
                    nOutputs = 1
WARNING: Repeated sample points have been detected. This may cause
         problems for some commands. So beware (see if spurge or
         rm_dup is needed).
psuade> # Okay. Going back to the original sample of size 300
psuade> load complete : nSamples = 300
                nInputs  = 3
                nOutputs = 1
psuade> # delete the first input
psuade> **********************************************************************
This command deletes a subset of inputs from the loaded sample.
----------------------------------------------------------------------
Proceed ? (y or n to abort) The current set of inputs are:
Input   1 = H
Input   2 = M
Input   3 = sig
How many inputs to delete? (1-2) Enter input number (1 - 3) : You are removing input 1 (H)
idelete completed. Use 'write' to store.
psuade> # Okay. Going back to the original sample of size 300
psuade> load complete : nSamples = 300
                nInputs  = 3
                nOutputs = 1
psuade> # duplicate the sample outputs
psuade> **********************************************************************
This command appends one output to the loaded sample. The values
of this output are obtained from another file in PSUADE format.
In case the sample in the second file is not the same as the loaded
sample, a response surface will be built using the second sample and
interpolated onto the loaded sample.
Also, nInputs in the second file can be different from (but has to be
less than) nInputs in the loaded sample, in which case input matching
information will be needed.
----------------------------------------------------------------------
Proceed ? (y or n to abort) NOTE: oadd successful - use write to store the modified sample.
psuade> # delete output 1
psuade> **********************************************************************
This command deletes a subset of outputs from the loaded sample.
----------------------------------------------------------------------
Proceed ? (y or n to abort) The current set of outputs are:
Output   1 = Y1
Output   2 = Y1
How many outputs to delete? (1-1) Enter output number (1 - 2) : You are removing output 1 (Y1)
Removing output Y1
odelete completed. Use 'write' to store.
psuade> # load the original sample again
psuade> load complete : nSamples = 300
                nInputs  = 3
                nOutputs = 1
psuade> # response surface analysis with Kriging
psuade> **********************************************************************
This command can be used to check the quality of a response surface
trained on the loaded sample. The quality metrics may be training
errors (from resubstitution test) or cross validation errors. Plots
will be created for visualizing the goodness of the fit.
----------------------------------------------------------------------
Proceed ? (y or n to abort) ----------------------------------------------------------------------
Available response surface tools: 
----------------------------------------------------------------------
----------------------------------------------------------------------
0.  MARS (Friedman's multivariate splines method)
1.  Linear regression 
2.  Quadratic regression 
3.  Cubic regression 
4.  Quartic regression (may be unstable)
5.  Selective polynomial regression (user selects terms to use)
6.  Derivative-based Legendre polynomial regression
7.  Legendre polynomial regression
8.  User-defined regression (user provides basis functions)
10. Gaussian process (Tong's implementation)
11. Kriging
12. Radial Basis Function
13. Sum-of-trees model
14. K nearest neighbors 
15. Artificial neural network
18. Sparse Grid polynomial regression
19. Splines on regular grid (1D, 2D, or 3D only)
20. Acosso (by Storlie, LANL. Need R to run)
21. BSSAnova (by Storlie, LANL. Need R to run)
22. Partial Least Squares Linear Regression (PLS)
23. MARS with bootstrap aggregating (bagging)
24. Radial Basis Function with bagging
25. Multi-Radial Basis Function (for large samples)
26. Multi-Gaussian process (Tong, for large samples)
27. Multi-MARS (for large samples)
28. Multi-Treed Gaussian process (for large samples)
29. Homogeneous Legendre regression (HLR)
30. Homogeneous GP (HGP)
31. Homogeneous Kriging (all homogeneous inputs: same bounds)
32. Hybrid Homogeneous GP (HyHGP)
33. Quantile GP (can be anisotropic)
34. User-modified general nonlinear function
    (Need to modify the PsuadeRegression.cpp file)
35. Multi-domain neural network (for large samples)
36. Pade regression F(X) ~ P(X) / Q(X)
Enter your choice ? Enter output number (1 - 1) = No transformation (e.g. log) on sample inputs or outputs.
**********************************************************************
Response surface method to be used: Kriging
======================================================================
RSA: Output ID = 1
RSA: Output Maximum/Minimum =   3.574862e+01  -3.734223e+00
INFO: Set printlevel higher (1-4) to display more information.
INFO: Turn on ana_expert mode for interpolation error graphics.
**********************************************************************
*                Kriging Analysis
* Set printlevel to 1-4 to see Kriging details.
* Turn on rs_expert mode to set slow or fast mode.
*  + Fast mode: no optimization of hyperparameters.
*      - turn on rs_expert to set hyperparameters.
*      - default values = 1.0
*  + Slow mode : hyperparameters are optimized.
*      - to change optimization parameters, turn on rs_expert mode.
*  + Snail mode (DEFAULT): use multi-start optimization.
*      - to change optimization parameters, turn on rs_expert mode.
* Create 'psuade_stop' file to gracefully terminate.
* Create 'psuade_print' file to set print level on the fly.
======================================================================
Kriging training begins....
======================================================================
* Kriging optimization tolerance = 1.495000e-03
Kriging training (3) begins.... (order = 0)
Kriging training (3) ends.
Kriging variance = 5.735741e+02
Kriging training completed.
RSAnalysis: L  1: interpolation error on training set 
             avg error far from 0 ==> systematic bias.
             rms error large      ==> average   error large.
             max error large      ==> pointwise error large.
             max error scaled by (ymax-ymin) large
                 ==> fitting probably not good.
             R-square may not always be a reliable measure.
  avg error   =  -5.802e-08 (unscaled)
  avg error   =  -4.749e-08 (scaled)
  rms error   =   4.113e-06 (unscaled)
  rms error   =   1.802e-06 (scaled)
  max error   =   1.600e-05 (unscaled, BASE=7.772e+00)
  max error   =   1.888e-05 (  scaled, BASE=3.900e-01)
  max error   =   4.051e-07 (  scaled by (ymax-ymin))
  R-square    =   1.00000000e+00
Based on 300 training points (total=300).
**********************************************************************
Next, you will be asked whether to do cross validation or not. Since
cross validation iterates as many times as the number of groups. The
rs_expert mode will be turned off. To change the default parameters
for different response surface, you will need to exit, create a config
file (use genconfigfile in command line mode), and set config option
in your data file.
----------------------------------------------------------------------
Perform cross validation ? (y or n) Enter the number of groups to validate : (2 - 300) RSFA: number of CV groups = 10
RSAnalysis: L  1:cross validation (CV) begins...
Random selection of leave-out groups ? (y or n) RSAnalysis:: L  1: processing CV group 1 (out of 10)
RSA: CV error for sample group     1 =   1.711e-06 (avg unscaled)
RSA: CV error for sample group     1 =   6.413e-06 (rms unscaled)
RSA: CV error for sample group     1 =   2.134e-05 (max unscaled)
RSA: CV error for sample group     1 =   5.405e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 1 processed (size=30)
RSAnalysis:: L  1: processing CV group 2 (out of 10)
RSA: CV error for sample group     2 =   1.784e-06 (avg unscaled)
RSA: CV error for sample group     2 =   1.644e-05 (rms unscaled)
RSA: CV error for sample group     2 =   6.122e-05 (max unscaled)
RSA: CV error for sample group     2 =   1.550e-06 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 2 processed (size=30)
RSAnalysis:: L  1: processing CV group 3 (out of 10)
RSA: CV error for sample group     3 =  -9.869e-07 (avg unscaled)
RSA: CV error for sample group     3 =   6.628e-06 (rms unscaled)
RSA: CV error for sample group     3 =   2.008e-05 (max unscaled)
RSA: CV error for sample group     3 =   5.086e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 3 processed (size=30)
RSAnalysis:: L  1: processing CV group 4 (out of 10)
RSA: CV error for sample group     4 =   1.757e-06 (avg unscaled)
RSA: CV error for sample group     4 =   8.387e-06 (rms unscaled)
RSA: CV error for sample group     4 =   2.357e-05 (max unscaled)
RSA: CV error for sample group     4 =   5.969e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 4 processed (size=30)
RSAnalysis:: L  1: processing CV group 5 (out of 10)
RSA: CV error for sample group     5 =   1.706e-06 (avg unscaled)
RSA: CV error for sample group     5 =   7.322e-06 (rms unscaled)
RSA: CV error for sample group     5 =   3.180e-05 (max unscaled)
RSA: CV error for sample group     5 =   8.054e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 5 processed (size=30)
RSAnalysis:: L  1: processing CV group 6 (out of 10)
RSA: CV error for sample group     6 =   1.463e-06 (avg unscaled)
RSA: CV error for sample group     6 =   6.213e-06 (rms unscaled)
RSA: CV error for sample group     6 =   2.112e-05 (max unscaled)
RSA: CV error for sample group     6 =   5.350e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 6 processed (size=30)
RSAnalysis:: L  1: processing CV group 7 (out of 10)
RSA: CV error for sample group     7 =  -5.499e-07 (avg unscaled)
RSA: CV error for sample group     7 =   7.036e-06 (rms unscaled)
RSA: CV error for sample group     7 =   2.588e-05 (max unscaled)
RSA: CV error for sample group     7 =   6.554e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 7 processed (size=30)
RSAnalysis:: L  1: processing CV group 8 (out of 10)
RSA: CV error for sample group     8 =  -2.117e-06 (avg unscaled)
RSA: CV error for sample group     8 =   5.944e-06 (rms unscaled)
RSA: CV error for sample group     8 =   1.716e-05 (max unscaled)
RSA: CV error for sample group     8 =   4.345e-07 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 8 processed (size=30)
RSAnalysis:: L  1: processing CV group 9 (out of 10)
RSA: CV error for sample group     9 =   4.815e-06 (avg unscaled)
RSA: CV error for sample group     9 =   1.901e-05 (rms unscaled)
RSA: CV error for sample group     9 =   9.754e-05 (max unscaled)
RSA: CV error for sample group     9 =   2.470e-06 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 9 processed (size=30)
RSAnalysis:: L  1: processing CV group 10 (out of 10)
RSA: CV error for sample group    10 =  -2.129e-06 (avg unscaled)
RSA: CV error for sample group    10 =   1.085e-05 (rms unscaled)
RSA: CV error for sample group    10 =   3.976e-05 (max unscaled)
RSA: CV error for sample group    10 =   1.007e-06 (max   scaled by (ymax-ymin))
RSAnalysis:: L  1: CV group 10 processed (size=30)
RSA: first member of sample group     1 = 35
RSA: CV error for sample group     1 =   1.711e-06 (avg unscaled)
RSA: CV error for sample group     1 =   1.565e-07 (avg scaled)
RSA: CV error for sample group     1 =   6.413e-06 (rms unscaled)
RSA: CV error for sample group     1 =   6.866e-07 (rms scaled)
RSA: CV error for sample group     1 =   2.134e-05 (max unscaled,BASE=1.604e+01)
RSA: CV error for sample group     1 =   2.650e-06 (max   scaled,BASE=1.427e+00)
RSA: CV error for sample group     1 =   5.405e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     2 = 172
RSA: CV error for sample group     2 =   1.784e-06 (avg unscaled)
RSA: CV error for sample group     2 =   2.217e-06 (avg scaled)
RSA: CV error for sample group     2 =   1.644e-05 (rms unscaled)
RSA: CV error for sample group     2 =   1.045e-05 (rms scaled)
RSA: CV error for sample group     2 =   6.122e-05 (max unscaled,BASE=3.734e+00)
RSA: CV error for sample group     2 =   5.477e-05 (max   scaled,BASE=9.177e-01)
RSA: CV error for sample group     2 =   1.550e-06 (max   scaled by (ymax-ymin))
RSA: first member of sample group     3 = 298
RSA: CV error for sample group     3 =  -9.869e-07 (avg unscaled)
RSA: CV error for sample group     3 =  -9.525e-07 (avg scaled)
RSA: CV error for sample group     3 =   6.628e-06 (rms unscaled)
RSA: CV error for sample group     3 =   4.952e-06 (rms scaled)
RSA: CV error for sample group     3 =   2.008e-05 (max unscaled,BASE=3.159e+01)
RSA: CV error for sample group     3 =   2.700e-05 (max   scaled,BASE=3.900e-01)
RSA: CV error for sample group     3 =   5.086e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     4 = 29
RSA: CV error for sample group     4 =   1.757e-06 (avg unscaled)
RSA: CV error for sample group     4 =   1.833e-07 (avg scaled)
RSA: CV error for sample group     4 =   8.387e-06 (rms unscaled)
RSA: CV error for sample group     4 =   9.267e-07 (rms scaled)
RSA: CV error for sample group     4 =   2.357e-05 (max unscaled,BASE=7.772e+00)
RSA: CV error for sample group     4 =   3.032e-06 (max   scaled,BASE=7.772e+00)
RSA: CV error for sample group     4 =   5.969e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     5 = 85
RSA: CV error for sample group     5 =   1.706e-06 (avg unscaled)
RSA: CV error for sample group     5 =   3.532e-07 (avg scaled)
RSA: CV error for sample group     5 =   7.322e-06 (rms unscaled)
RSA: CV error for sample group     5 =   1.958e-06 (rms scaled)
RSA: CV error for sample group     5 =   3.180e-05 (max unscaled,BASE=3.106e+00)
RSA: CV error for sample group     5 =   1.024e-05 (max   scaled,BASE=3.106e+00)
RSA: CV error for sample group     5 =   8.054e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     6 = 237
RSA: CV error for sample group     6 =   1.463e-06 (avg unscaled)
RSA: CV error for sample group     6 =   2.743e-07 (avg scaled)
RSA: CV error for sample group     6 =   6.213e-06 (rms unscaled)
RSA: CV error for sample group     6 =   8.450e-07 (rms scaled)
RSA: CV error for sample group     6 =   2.112e-05 (max unscaled,BASE=1.278e+01)
RSA: CV error for sample group     6 =   3.249e-06 (max   scaled,BASE=2.661e+00)
RSA: CV error for sample group     6 =   5.350e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     7 = 49
RSA: CV error for sample group     7 =  -5.499e-07 (avg unscaled)
RSA: CV error for sample group     7 =   1.263e-06 (avg scaled)
RSA: CV error for sample group     7 =   7.036e-06 (rms unscaled)
RSA: CV error for sample group     7 =   9.678e-06 (rms scaled)
RSA: CV error for sample group     7 =   2.588e-05 (max unscaled,BASE=3.575e+01)
RSA: CV error for sample group     7 =   4.549e-05 (max   scaled,BASE=2.548e-01)
RSA: CV error for sample group     7 =   6.554e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     8 = 137
RSA: CV error for sample group     8 =  -2.117e-06 (avg unscaled)
RSA: CV error for sample group     8 =  -3.926e-07 (avg scaled)
RSA: CV error for sample group     8 =   5.944e-06 (rms unscaled)
RSA: CV error for sample group     8 =   1.842e-06 (rms scaled)
RSA: CV error for sample group     8 =   1.716e-05 (max unscaled,BASE=2.958e+01)
RSA: CV error for sample group     8 =   9.278e-06 (max   scaled,BASE=8.923e-01)
RSA: CV error for sample group     8 =   4.345e-07 (max   scaled by (ymax-ymin))
RSA: first member of sample group     9 = 219
RSA: CV error for sample group     9 =   4.815e-06 (avg unscaled)
RSA: CV error for sample group     9 =   5.889e-07 (avg scaled)
RSA: CV error for sample group     9 =   1.901e-05 (rms unscaled)
RSA: CV error for sample group     9 =   2.023e-06 (rms scaled)
RSA: CV error for sample group     9 =   9.754e-05 (max unscaled,BASE=9.538e+00)
RSA: CV error for sample group     9 =   1.023e-05 (max   scaled,BASE=9.538e+00)
RSA: CV error for sample group     9 =   2.470e-06 (max   scaled by (ymax-ymin))
RSA: first member of sample group    10 = 162
RSA: CV error for sample group    10 =  -2.129e-06 (avg unscaled)
RSA: CV error for sample group    10 =  -1.508e-07 (avg scaled)
RSA: CV error for sample group    10 =   1.085e-05 (rms unscaled)
RSA: CV error for sample group    10 =   9.221e-07 (rms scaled)
RSA: CV error for sample group    10 =   3.976e-05 (max unscaled,BASE=3.517e+01)
RSA: CV error for sample group    10 =   4.271e-06 (max   scaled,BASE=6.172e+00)
RSA: CV error for sample group    10 =   1.007e-06 (max   scaled by (ymax-ymin))
RSA: final CV error  =   7.453e-07 (avg unscaled)
RSA: final CV error  =   3.541e-07 (avg   scaled)
RSA: final CV error  =   1.040e-05 (rms unscaled)
RSA: final CV error  =   4.916e-06 (rms   scaled)
RSA: final CV error  =   9.754e-05 (max unscaled, BASE=9.538e+00)
RSA: final CV error  =   5.477e-05 (max   scaled, BASE=9.177e-01)
RSA: final CV error  =   2.470e-06 (max   scaled by (ymax-ymin))
RSA: L  1:cross validation (CV) completed.
CV error file is RSFA_CV_err.m
**********************************************************************
psuade> # split the sample into two sets
psuade> **********************************************************************
This command splits the loaded sample inputs into 2 sub-samples.
A few splitting options are available.
----------------------------------------------------------------------
Proceed ? (y or n to abort) The current sample size is 300.
Sample size of the first set? (1 - 299) Select from the following options: 
1. random draw from the sample
2. draw the first 150 sample points
3. draw every other 2 sample points
4. draw the first m points from every chunk of M points
your choice: (1 - 4) The 2 data files are in psuadeSample1 and psuadeSample2.
The loaded sample in the workspace have been erased so you need to
re-load to restore the original sample.
psuade> # load the first splitted sample
psuade> load complete : nSamples = 150
                nInputs  = 3
                nOutputs = 1
psuade> # add the second splitted sample
psuade> loadmore complete : nSamples = 300
                    nInputs  = 3
                    nOutputs = 1
psuade> # write this concatenated sample into a file called 'abc'
psuade> psuade> # check that this `abc' file is the same as the original sample
psuade> psuade> # load the sample again
psuade> load complete : nSamples = 300
                nInputs  = 3
                nOutputs = 1
psuade> # perform response-surface-based main effect analysis (Kriging)
psuade> **********************************************************************
This command computes first-order sensitivity indices using the
response surface constructed from the loaded sample.
* rsvce1_sobol uses the Sobol' method
* rsvce1_sobol supports 'non'-uniform input distributions with no
  input correlations (rsvce1_bin handles all input distributions and
  constraints).
* rsvce1_sobol supports input constraints.
NOTE: Turn on ana_expert mode for bootstrapped analysis.
**********************************************************************
Proceed ? (y or n to abort) Enter output number (1 - 1) : ----------------------------------------------------------------------
Available response surface tools: 
----------------------------------------------------------------------
----------------------------------------------------------------------
0.  MARS (Friedman's multivariate splines method)
1.  Linear regression 
2.  Quadratic regression 
3.  Cubic regression 
4.  Quartic regression (may be unstable)
5.  Selective polynomial regression (user selects terms to use)
6.  Derivative-based Legendre polynomial regression
7.  Legendre polynomial regression
8.  User-defined regression (user provides basis functions)
10. Gaussian process (Tong's implementation)
11. Kriging
12. Radial Basis Function
13. Sum-of-trees model
14. K nearest neighbors 
15. Artificial neural network
18. Sparse Grid polynomial regression
19. Splines on regular grid (1D, 2D, or 3D only)
20. Acosso (by Storlie, LANL. Need R to run)
21. BSSAnova (by Storlie, LANL. Need R to run)
22. Partial Least Squares Linear Regression (PLS)
23. MARS with bootstrap aggregating (bagging)
24. Radial Basis Function with bagging
25. Multi-Radial Basis Function (for large samples)
26. Multi-Gaussian process (Tong, for large samples)
27. Multi-MARS (for large samples)
28. Multi-Treed Gaussian process (for large samples)
29. Homogeneous Legendre regression (HLR)
30. Homogeneous GP (HGP)
31. Homogeneous Kriging (all homogeneous inputs: same bounds)
32. Hybrid Homogeneous GP (HyHGP)
33. Quantile GP (can be anisotropic)
34. User-modified general nonlinear function
    (Need to modify the PsuadeRegression.cpp file)
35. Multi-domain neural network (for large samples)
36. Pade regression F(X) ~ P(X) / Q(X)
Enter your response surface choice ? RSMSobol1 Sobol: nSams = 1000000
**********************************************************************
**********************************************************************
Sobol' 1st-order indices (normalized, 'sobol'):
VCE for input   1 =  4.404e-01
VCE for input   2 =  1.107e-02
VCE for input   3 =  5.480e-01
Total variance = 7.567435e+01
**********************************************************************
RSMVCE1 plot file = matlabrsvce1_sobol.m
psuade> # perform response-surface-based total effect analysis (Kriging)
psuade> **********************************************************************
This command computes total-order sensitivity indices using the
response surface constructed from the loaded sample.
* rstsi_sobol uses the Sobol' method
* rstsi_sobol supports 'non'-uniform input distributions with no
  input correlations (rstsi_bin handles all input distributions and
  constraints).
* rstsi_sobol supports input constraints.
NOTE: Turn on ana_expert mode for bootstrapped analysis.
**********************************************************************
Proceed ? (y or n to abort) Enter output number (1 - 1) : ----------------------------------------------------------------------
Available response surface tools: 
----------------------------------------------------------------------
----------------------------------------------------------------------
0.  MARS (Friedman's multivariate splines method)
1.  Linear regression 
2.  Quadratic regression 
3.  Cubic regression 
4.  Quartic regression (may be unstable)
5.  Selective polynomial regression (user selects terms to use)
6.  Derivative-based Legendre polynomial regression
7.  Legendre polynomial regression
8.  User-defined regression (user provides basis functions)
10. Gaussian process (Tong's implementation)
11. Kriging
12. Radial Basis Function
13. Sum-of-trees model
14. K nearest neighbors 
15. Artificial neural network
18. Sparse Grid polynomial regression
19. Splines on regular grid (1D, 2D, or 3D only)
20. Acosso (by Storlie, LANL. Need R to run)
21. BSSAnova (by Storlie, LANL. Need R to run)
22. Partial Least Squares Linear Regression (PLS)
23. MARS with bootstrap aggregating (bagging)
24. Radial Basis Function with bagging
25. Multi-Radial Basis Function (for large samples)
26. Multi-Gaussian process (Tong, for large samples)
27. Multi-MARS (for large samples)
28. Multi-Treed Gaussian process (for large samples)
29. Homogeneous Legendre regression (HLR)
30. Homogeneous GP (HGP)
31. Homogeneous Kriging (all homogeneous inputs: same bounds)
32. Hybrid Homogeneous GP (HyHGP)
33. Quantile GP (can be anisotropic)
34. User-modified general nonlinear function
    (Need to modify the PsuadeRegression.cpp file)
35. Multi-domain neural network (for large samples)
36. Pade regression F(X) ~ P(X) / Q(X)
Enter your response surface choice ? RSMSobolTSI Sobol: nSams = 1000000
**********************************************************************
**********************************************************************
**********************************************************************
Sobol' total-order indices (normalized, 'sobol'):
Sobol' total-order indices (normalized, 'bin'):
TSI for input   1 =  4.405e-01
TSI for input   2 =  1.152e-02
TSI for input   3 =  5.484e-01
Total variance = 7.571976e+01
**********************************************************************
RSMTSI plot file = matlabrstsi_sobol.m
psuade> # perform RS-based pairwise sensitivity analysis (Kriging)
psuade> **********************************************************************
This command computes second-order sensitivity indices (input pairs)
using aresponse surface constructed from the loaded sample.
* rsvce2_sobol uses the Sobol' method
* rsvce2_sobol supports 'non'-uniform input distributions with no
  input correlations (rsvce2_bin handles all input distributions and
  constraints).
* rsvce2_sobol supports input constraints.
NOTE: Turn on ana_expert mode for bootstrapped analysis.
**********************************************************************
Proceed ? (y or n to abort) Enter output number (1 - 1) : ----------------------------------------------------------------------
Available response surface tools: 
----------------------------------------------------------------------
----------------------------------------------------------------------
0.  MARS (Friedman's multivariate splines method)
1.  Linear regression 
2.  Quadratic regression 
3.  Cubic regression 
4.  Quartic regression (may be unstable)
5.  Selective polynomial regression (user selects terms to use)
6.  Derivative-based Legendre polynomial regression
7.  Legendre polynomial regression
8.  User-defined regression (user provides basis functions)
10. Gaussian process (Tong's implementation)
11. Kriging
12. Radial Basis Function
13. Sum-of-trees model
14. K nearest neighbors 
15. Artificial neural network
18. Sparse Grid polynomial regression
19. Splines on regular grid (1D, 2D, or 3D only)
20. Acosso (by Storlie, LANL. Need R to run)
21. BSSAnova (by Storlie, LANL. Need R to run)
22. Partial Least Squares Linear Regression (PLS)
23. MARS with bootstrap aggregating (bagging)
24. Radial Basis Function with bagging
25. Multi-Radial Basis Function (for large samples)
26. Multi-Gaussian process (Tong, for large samples)
27. Multi-MARS (for large samples)
28. Multi-Treed Gaussian process (for large samples)
29. Homogeneous Legendre regression (HLR)
30. Homogeneous GP (HGP)
31. Homogeneous Kriging (all homogeneous inputs: same bounds)
32. Hybrid Homogeneous GP (HyHGP)
33. Quantile GP (can be anisotropic)
34. User-modified general nonlinear function
    (Need to modify the PsuadeRegression.cpp file)
35. Multi-domain neural network (for large samples)
36. Pade regression F(X) ~ P(X) / Q(X)
Enter your response surface choice ? RSMSobol2 Sobol: nSams = 100000
**********************************************************************
Sobol' input-pair indices (normalized):sobol
(1st+2nd)VCE for input   1,  2 =  4.514e-01
(1st+2nd)VCE for input   1,  3 =  9.883e-01
(1st+2nd)VCE for input   2,  3 =  5.595e-01
Total variance = 7.567425e+01
**********************************************************************
RSMVCE2 plot file = matlabrsvce2_sobol.m
psuade> # generate basic statistics from the raw sample
psuade> **********************************************************************
This command computes the basic statistics (mean, standard deviation,
skewness, and kurtosis) of a selected output in the loaded sample.
----------------------------------------------------------------------
Proceed ? (y or n to abort) psuade> # generate basic statistics from the RS constructed from the sample
psuade> **********************************************************************
* Response surface-based Uncertainty Analysis
----------------------------------------------------------------------
* To include response surface uncertainties, use stochastic response
* surface such as polynomial regression, MARSB, Kriging, .. (specified
* in your loaded data file).
* This command computes worst case RS uncertainties. Turn on MASTER
* mode to select average case RS uncertainties.
----------------------------------------------------------------------
Proceed ? (y or n to abort) Enter output number (1 - 1) : A sample is needed from you to propagate through the RS.
Select between the two options below: 
1. PSUADE will generate the sample
2. User will provide the sample (in PSUADE data format)
Enter 1 or 2 : PSUADE will generate a sample for uncertainty analysis.
Sample size ? (10000 - 100000) **********************************************************************
NOTE: Uniform distribution is assumed for all inputs. To use other
      than uniform distributions, prescribe them in the sample file
      and set use_input_pdfs in the ANALYSIS section.
**********************************************************************
The default is to perform the average case analysis (1): 
 - For each sample point, evaluation using stochastic RS gives a mean
   and a std deviation. Average case analysis take these quantities
   and creates a small sample for each sample point.  Afterward, it
   creates a probability distribution based on this enlarged sample.
However, you can also perform a worst case analysis (2): 
 - For each sample point, evaluation using stochastic RS gives a mean
   and a standard deviation. Worst case analysis takes the max and min
   at each sample point as the +/- 3 std dev. Afterward, it creates a
   probability distribution enveloped by the max/min distributions.
Enter 1 (average case) or 2 (worst case) analysis : ** CREATING RESPONSE SURFACE
----------------------------------------------------------------------
Available response surface tools: 
----------------------------------------------------------------------
----------------------------------------------------------------------
0.  MARS (Friedman's multivariate splines method)
1.  Linear regression 
2.  Quadratic regression 
3.  Cubic regression 
4.  Quartic regression (may be unstable)
5.  Selective polynomial regression (user selects terms to use)
6.  Derivative-based Legendre polynomial regression
7.  Legendre polynomial regression
8.  User-defined regression (user provides basis functions)
10. Gaussian process (Tong's implementation)
11. Kriging
12. Radial Basis Function
13. Sum-of-trees model
14. K nearest neighbors 
15. Artificial neural network
18. Sparse Grid polynomial regression
19. Splines on regular grid (1D, 2D, or 3D only)
20. Acosso (by Storlie, LANL. Need R to run)
21. BSSAnova (by Storlie, LANL. Need R to run)
22. Partial Least Squares Linear Regression (PLS)
23. MARS with bootstrap aggregating (bagging)
24. Radial Basis Function with bagging
25. Multi-Radial Basis Function (for large samples)
26. Multi-Gaussian process (Tong, for large samples)
27. Multi-MARS (for large samples)
28. Multi-Treed Gaussian process (for large samples)
29. Homogeneous Legendre regression (HLR)
30. Homogeneous GP (HGP)
31. Homogeneous Kriging (all homogeneous inputs: same bounds)
32. Hybrid Homogeneous GP (HyHGP)
33. Quantile GP (can be anisotropic)
34. User-modified general nonlinear function
    (Need to modify the PsuadeRegression.cpp file)
35. Multi-domain neural network (for large samples)
36. Pade regression F(X) ~ P(X) / Q(X)
Please enter your choice ? Kriging training begins....
======================================================================
* Kriging optimization tolerance = 1.495000e-03
Kriging training (3) begins.... (order = 0)
Kriging training (3) ends.
Kriging variance = 5.735741e+02
Kriging training completed.
The outputs and std deviations of the evaluation sample has been
written into 'rsua_sample'.
**********************************************************************
Sample mean    = 1.806958e+01 (RS uncertainties not included)
Sample std dev = 8.698634e+00 (RS uncertainties not included)
======================================================================
Sample mean    = 1.806958e+01 (RS uncertainties included)
Sample std dev = 8.698634e+00 (RS uncertainties included)
**********************************************************************
Output distribution plots file = matlabrsua.m.
psuade> # correlation analysis
psuade> **********************************************************************
This command computes correlation information between inputs and a
selected output of the loaded sample.
----------------------------------------------------------------------
Proceed ? (y or n to abort) Enter output number (1 - 1) : No transformation (e.g. log) on sample inputs or outputs.
**********************************************************************
*                   Correlation Analysis
======================================================================
*  Basic Statistics
----------------------------------------------------------------------
* Output of interest = 1
----------------------------------------------------------------------
Correlation: mean     = 1.795654e+01
Correlation: variance = 7.557199e+01
======================================================================
*  Pearson correlation coefficients (PEAR) - linear -
*  which gives a measure of relationship between X_i's & Y.
----------------------------------------------------------------------
* Pearson Correlation coeff.  (Input   1) = 6.622288e-01
* Pearson Correlation coeff.  (Input   2) = -9.847960e-02
* Pearson Correlation coeff.  (Input   3) = 7.262922e-01
======================================================================
* Spearman coefficients (SPEA) - nonlinear relationship - which gives
* a measure of relationship between X_i's & Y
* (Idea: Use input ranks instead)
----------------------------------------------------------------------
* Spearman coefficient         (Input   1 ) = 6.595100e-01
* Spearman coefficient         (Input   2 ) = -9.536506e-02
* Spearman coefficient         (Input   3 ) = 7.177298e-01
======================================================================
Correlation analysis plot file = matlabca.m
======================================================================
* Spearman coefficient(ordered) (Input   3 ) = 7.177298e-01
* Spearman coefficient(ordered) (Input   1 ) = 6.595100e-01
* Spearman coefficient(ordered) (Input   2 ) = 9.536506e-02
**********************************************************************
psuade> # main effect analysis using the raw sample
psuade> **********************************************************************
This command takes the 'large' (tens of thousands or more) sample that
has been loaded and then computes the approximate main effects (Sobol'
first-order indices for all inputs).  It can handle uncorrelated and
correlated inputs (in the form of joint multivariate distributions or
inequality constraints, which are expected to have been embedded in
loaded sample.)
This command operates directly on the sample, meaning that no response
surface is used in the process (as opposed to 'rsvce1_ni'), although
the sample may have been evaluated using a response surface before
it is loaded.
This command performs best with replicated Latin hypercube samples,
although it works for any random or quasi-random samples, albeit a
a little less accurate. Larger samples (tens to hundred of thousands)
should give more accurate results. For small samples hundreds), the
alternative is 'rsvce1_ni', which internally generates large samples
and computes main effects via response surfaces.
NOTE: internal parameters for this command can be changed by first
      turning on ana_expert mode before calling this command.
----------------------------------------------------------------------
Proceed ? (y or n to abort) Enter output number (1 - 1) : No transformation (e.g. log) on sample inputs or outputs.
MainEffect INFO: nSamples may be too small to give results
           with acceptable accuracy (nSamples = 300).
**********************************************************************
*              Main Effect Analysis
----------------------------------------------------------------------
* Turn on higher printlevel to display more information
* Turn on ana_expert mode for more plots
----------------------------------------------------------------------
* Number of sample points =        300
* Number of Inputs        =          3
======================================================================
Output 1
====> MainEffect: mean               =   1.7957e+01
====> MainEffect: standard deviation =   8.6787e+00
* MainEffect INFO: RLH nReps <= 5 for input 1.
*     ==> Probably not replicated Latin hypercube
*     ==> Crude (1D-binning) analysis.
**********************************************************************
*         Crude (1D-binning) Main Effect
======================================================================
* For small to moderate sample sizes, this method gives rough estimate
* of main effect (first order sensitivity).  These estimates can vary
* with different choices of internal settings.  For example, you can
* try different number of levels to assess the computed main effect
* measures with respect to the it.
* Turn on analysis expert mode to change the settings.
* MainEffect: number of levels   = 17
* MainEffect: sample size/levels = 17
======================================================================
(ME INFO) Input    1: 17 out of 17 bins populated.
(ME INFO) Input    2: 17 out of 17 bins populated.
(ME INFO) Input    3: 17 out of 17 bins populated.
======================================================================
Input    1, normalized 1st-order effect =  4.43e-01 (raw =  3.34e+01)
Input    2, normalized 1st-order effect =  2.22e-02 (raw =  1.67e+00)
Input    3, normalized 1st-order effect =  5.52e-01 (raw =  4.16e+01)
Total VCE =  1.02e+00
**********************************************************************
MainEffect plot matlab file = matlabme.m
psuade> # perform analysis of variation 
psuade> **********************************************************************
This command performs analysis of variation (ANOVA) on a selected
output of the loaded sample.
----------------------------------------------------------------------
Proceed ? (y or n to abort) Enter output number (1 - 1) : No transformation (e.g. log) on sample inputs or outputs.
This analysis uses a response surface constructed from your sample.
The available response surfaces are:
1. MARS
2. Legendre polynomial
3. Gaussian process
Enter your response surface choice ? **********************************************************************
*           MARS Model
* Default number of basis functions = 100
* Default degree of interactions    = 3
======================================================================
**********************************************************************
*                       ANOVA table
*              (based on RS interpolation)
======================================================================
=================================================================
|  source of | deg. of|   sum of    |   mean      |            |
|  variation | freedom|   squares   |   square    |       F    |
-----------------------------------------------------------------
|          1 |     63 |  6.2064e+03 |  9.8514e+01 |  3.2604e+03|
|          2 |     63 |  1.5571e+02 |  2.4716e+00 |  4.6370e+01|
|          3 |     63 |  7.7567e+03 |  1.2312e+02 |  5.0668e+03|
|      1,  2 |   3969 |  1.5352e-03 |  3.8681e-07 |  7.1768e-06|
|      1,  3 |   3969 |  1.6182e-02 |  4.0772e-06 |  7.5648e-05|
|      2,  3 |   3969 |  6.3987e+00 |  1.6122e-03 |  2.9926e-02|
|   total    | 262143 |  1.4125e+04 |  5.3884e-02 |    -----   |
**********************************************************************
* Mean square : importance indicator of the source
* F value     : large ==> reject null hypothesis ==> 
*           ==> significant differences among population means.
*               (or variance of conditional mean is high)
* Note: pairwise sources of variation exclude individual sources.
**********************************************************************
psuade> # perform parameter ranking using MARS measure
psuade> **********************************************************************
This command performs COARSE global sensitivity analysis based on the
result of training the loaded sample with the MARS response surface.
The loaded sample may be any space-filling design.
NOTE: COARSE means not quantitatively accurate.
----------------------------------------------------------------------
Proceed ? (y or n to abort) Enter output number (1 - 1) = MARS (0) or MARS with bagging (1) ? **********************************************************************
*           MARS Model
* Default number of basis functions = 100
* Default degree of interactions    = 3
======================================================================
Mars ranking is now in matlabmarsa.m.
**********************************************************************
* Mars screening rankings 
**********************************************************************
*  Rank   1 : Input =   1 (score = 100.0)
*  Rank   2 : Input =   3 (score = 79.7)
*  Rank   3 : Input =   2 (score = 15.5)
**********************************************************************
psuade> # perform parameter ranking using Kriging measure
psuade> **********************************************************************
This command performs COARSE global sensitivity analysis based on the
result of training the loaded sample with the Kriging model (that is,
magnitudes of the hyperparameters). The loaded sample is expected to
be any space-filling design.
NOTE: this command does not work on samples with replicated points.
NOTE: COARSE means not quantitatively accurate.
----------------------------------------------------------------------
Proceed ? (y or n to abort) Enter output number (1 - 1) = **********************************************************************
*                Kriging Analysis
* Set printlevel to 1-4 to see Kriging details.
* Turn on rs_expert mode to set slow or fast mode.
*  + Fast mode: no optimization of hyperparameters.
*      - turn on rs_expert to set hyperparameters.
*      - default values = 1.0
*  + Slow mode : hyperparameters are optimized.
*      - to change optimization parameters, turn on rs_expert mode.
*  + Snail mode (DEFAULT): use multi-start optimization.
*      - to change optimization parameters, turn on rs_expert mode.
* Create 'psuade_stop' file to gracefully terminate.
* Create 'psuade_print' file to set print level on the fly.
======================================================================
Kriging training begins....
======================================================================
* Kriging optimization tolerance = 1.495000e-03
Kriging training (3) begins.... (order = 0)
Kriging training (3) ends.
Kriging variance = 5.735741e+02
Kriging training completed.
Kriging ranking in file matlabkrisa.m
**********************************************************************
* Kriging screening rankings
**********************************************************************
*  Rank   1 : Input =    3 (score = 100.0) (ref = 3.599009e-01)
*  Rank   2 : Input =    1 (score =  10.3) (ref = 3.711364e-02)
*  Rank   3 : Input =    2 (score =   3.8) (ref = 1.377589e-02)
**********************************************************************
psuade> psuade> psuade terminates ...
